'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _raw = require('../serializers/raw');

var _raw2 = _interopRequireDefault(_raw);

var _state = require('../models/state');

var _state2 = _interopRequireDefault(_state);

var _transform = require('./transform');

var _transform2 = _interopRequireDefault(_transform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Debug.
 *
 * @type {Debug}
 */

var debug = (0, _debug2.default)('slate:ot');

/**
 * Create a new snapshot from a `raw` representation.
 *
 * @param {Object} raw
 * @return {Object}
 */

function create(raw) {
  debug('create', { raw: raw });

  if (!raw) {
    raw = {
      kind: 'state',
      document: {
        kind: 'document',
        nodes: [],
        data: {}
      }
    };
  }

  return raw;
}

/**
 * Serialize a `state` snapshot.
 *
 * @param {State} state
 * @return {Object}
 */

function serialize(state) {
  debug('serialize', { state: state });
  if (state instanceof _state2.default) {
    return _raw2.default.serialize(state);
  } else {
    return state;
  }
}

/**
 * Deserialize an array of `operations` to a state.
 *
 * @param {Object} raw
 * @return {State}
 */

function deserialize(raw) {
  debug('deserialize', { raw: raw });
  if (raw instanceof _state2.default) {
    return raw;
  } else {
    return _raw2.default.deserialize(raw, { normalize: false });
  }
}

/**
 * Apply `operations` to a `snapshot`.
 *
 * @param {State|Object} snapshot
 * @param {Array} operations
 * @return {State|Object}
 */

function apply(snapshot, operations) {
  debug('apply', { snapshot: snapshot, operations: operations });
  var isRaw = !(snapshot instanceof _state2.default);
  var before = isRaw ? _raw2.default.deserialize(snapshot, { normalize: false }) : snapshot;
  var tr = before.transform().applyOperations(operations);
  var next = tr.apply();
  var after = isRaw ? _raw2.default.serialize(next) : next;
  return after;
}

/**
 * OT-type, compatible with: https://github.com/ottypes
 *
 * @type {Object}
 */

var type = {
  name: 'slate',
  uri: 'http://slatejs.org/types/slate/v1',
  apply: apply,
  create: create,
  deserialize: deserialize,
  serialize: serialize,
  transform: _transform2.default
};

/**
 * Export.
 *
 * @type {Object}
 */

exports.default = {
  type: type
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsImNyZWF0ZSIsInJhdyIsImtpbmQiLCJkb2N1bWVudCIsIm5vZGVzIiwiZGF0YSIsInNlcmlhbGl6ZSIsInN0YXRlIiwiZGVzZXJpYWxpemUiLCJub3JtYWxpemUiLCJhcHBseSIsInNuYXBzaG90Iiwib3BlcmF0aW9ucyIsImlzUmF3IiwiYmVmb3JlIiwidHIiLCJ0cmFuc2Zvcm0iLCJhcHBseU9wZXJhdGlvbnMiLCJuZXh0IiwiYWZ0ZXIiLCJ0eXBlIiwibmFtZSIsInVyaSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxRQUFRLHFCQUFNLFVBQU4sQ0FBZDs7QUFFQTs7Ozs7OztBQU9BLFNBQVNDLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCO0FBQ25CRixRQUFNLFFBQU4sRUFBZ0IsRUFBRUUsUUFBRixFQUFoQjs7QUFFQSxNQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNSQSxVQUFNO0FBQ0pDLFlBQU0sT0FERjtBQUVKQyxnQkFBVTtBQUNSRCxjQUFNLFVBREU7QUFFUkUsZUFBTyxFQUZDO0FBR1JDLGNBQU07QUFIRTtBQUZOLEtBQU47QUFRRDs7QUFFRCxTQUFPSixHQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUFPQSxTQUFTSyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUN4QlIsUUFBTSxXQUFOLEVBQW1CLEVBQUVRLFlBQUYsRUFBbkI7QUFDQSxNQUFJQSxnQ0FBSixFQUE0QjtBQUMxQixXQUFPLGNBQUlELFNBQUosQ0FBY0MsS0FBZCxDQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0EsS0FBUDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs7QUFPQSxTQUFTQyxXQUFULENBQXFCUCxHQUFyQixFQUEwQjtBQUN4QkYsUUFBTSxhQUFOLEVBQXFCLEVBQUVFLFFBQUYsRUFBckI7QUFDQSxNQUFJQSw4QkFBSixFQUEwQjtBQUN4QixXQUFPQSxHQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBTyxjQUFJTyxXQUFKLENBQWdCUCxHQUFoQixFQUFxQixFQUFFUSxXQUFXLEtBQWIsRUFBckIsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs7O0FBUUEsU0FBU0MsS0FBVCxDQUFlQyxRQUFmLEVBQXlCQyxVQUF6QixFQUFxQztBQUNuQ2IsUUFBTSxPQUFOLEVBQWUsRUFBRVksa0JBQUYsRUFBWUMsc0JBQVosRUFBZjtBQUNBLE1BQU1DLFFBQVEsRUFBRUYsbUNBQUYsQ0FBZDtBQUNBLE1BQU1HLFNBQVNELFFBQVEsY0FBSUwsV0FBSixDQUFnQkcsUUFBaEIsRUFBMEIsRUFBRUYsV0FBVyxLQUFiLEVBQTFCLENBQVIsR0FBMERFLFFBQXpFO0FBQ0EsTUFBTUksS0FBS0QsT0FBT0UsU0FBUCxHQUFtQkMsZUFBbkIsQ0FBbUNMLFVBQW5DLENBQVg7QUFDQSxNQUFNTSxPQUFPSCxHQUFHTCxLQUFILEVBQWI7QUFDQSxNQUFNUyxRQUFRTixRQUFRLGNBQUlQLFNBQUosQ0FBY1ksSUFBZCxDQUFSLEdBQThCQSxJQUE1QztBQUNBLFNBQU9DLEtBQVA7QUFDRDs7QUFFRDs7Ozs7O0FBTUEsSUFBTUMsT0FBTztBQUNYQyxRQUFNLE9BREs7QUFFWEMsT0FBSyxtQ0FGTTtBQUdYWixjQUhXO0FBSVhWLGdCQUpXO0FBS1hRLDBCQUxXO0FBTVhGLHNCQU5XO0FBT1hVO0FBUFcsQ0FBYjs7QUFVQTs7Ozs7O2tCQU1lO0FBQ2JJO0FBRGEsQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJ1xuaW1wb3J0IFJhdyBmcm9tICcuLi9zZXJpYWxpemVycy9yYXcnXG5pbXBvcnQgU3RhdGUgZnJvbSAnLi4vbW9kZWxzL3N0YXRlJ1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybSdcblxuLyoqXG4gKiBEZWJ1Zy5cbiAqXG4gKiBAdHlwZSB7RGVidWd9XG4gKi9cblxuY29uc3QgZGVidWcgPSBEZWJ1Zygnc2xhdGU6b3QnKVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzbmFwc2hvdCBmcm9tIGEgYHJhd2AgcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJhd1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZShyYXcpIHtcbiAgZGVidWcoJ2NyZWF0ZScsIHsgcmF3IH0pXG5cbiAgaWYgKCFyYXcpIHtcbiAgICByYXcgPSB7XG4gICAgICBraW5kOiAnc3RhdGUnLFxuICAgICAgZG9jdW1lbnQ6IHtcbiAgICAgICAga2luZDogJ2RvY3VtZW50JyxcbiAgICAgICAgbm9kZXM6IFtdLFxuICAgICAgICBkYXRhOiB7fSxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmF3XG59XG5cbi8qKlxuICogU2VyaWFsaXplIGEgYHN0YXRlYCBzbmFwc2hvdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShzdGF0ZSkge1xuICBkZWJ1Zygnc2VyaWFsaXplJywgeyBzdGF0ZSB9KVxuICBpZiAoc3RhdGUgaW5zdGFuY2VvZiBTdGF0ZSkge1xuICAgIHJldHVybiBSYXcuc2VyaWFsaXplKHN0YXRlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0ZVxuICB9XG59XG5cbi8qKlxuICogRGVzZXJpYWxpemUgYW4gYXJyYXkgb2YgYG9wZXJhdGlvbnNgIHRvIGEgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJhd1xuICogQHJldHVybiB7U3RhdGV9XG4gKi9cblxuZnVuY3Rpb24gZGVzZXJpYWxpemUocmF3KSB7XG4gIGRlYnVnKCdkZXNlcmlhbGl6ZScsIHsgcmF3IH0pXG4gIGlmIChyYXcgaW5zdGFuY2VvZiBTdGF0ZSkge1xuICAgIHJldHVybiByYXdcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gUmF3LmRlc2VyaWFsaXplKHJhdywgeyBub3JtYWxpemU6IGZhbHNlIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBBcHBseSBgb3BlcmF0aW9uc2AgdG8gYSBgc25hcHNob3RgLlxuICpcbiAqIEBwYXJhbSB7U3RhdGV8T2JqZWN0fSBzbmFwc2hvdFxuICogQHBhcmFtIHtBcnJheX0gb3BlcmF0aW9uc1xuICogQHJldHVybiB7U3RhdGV8T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFwcGx5KHNuYXBzaG90LCBvcGVyYXRpb25zKSB7XG4gIGRlYnVnKCdhcHBseScsIHsgc25hcHNob3QsIG9wZXJhdGlvbnMgfSlcbiAgY29uc3QgaXNSYXcgPSAhKHNuYXBzaG90IGluc3RhbmNlb2YgU3RhdGUpXG4gIGNvbnN0IGJlZm9yZSA9IGlzUmF3ID8gUmF3LmRlc2VyaWFsaXplKHNuYXBzaG90LCB7IG5vcm1hbGl6ZTogZmFsc2UgfSkgOiBzbmFwc2hvdFxuICBjb25zdCB0ciA9IGJlZm9yZS50cmFuc2Zvcm0oKS5hcHBseU9wZXJhdGlvbnMob3BlcmF0aW9ucylcbiAgY29uc3QgbmV4dCA9IHRyLmFwcGx5KClcbiAgY29uc3QgYWZ0ZXIgPSBpc1JhdyA/IFJhdy5zZXJpYWxpemUobmV4dCkgOiBuZXh0XG4gIHJldHVybiBhZnRlclxufVxuXG4vKipcbiAqIE9ULXR5cGUsIGNvbXBhdGlibGUgd2l0aDogaHR0cHM6Ly9naXRodWIuY29tL290dHlwZXNcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbmNvbnN0IHR5cGUgPSB7XG4gIG5hbWU6ICdzbGF0ZScsXG4gIHVyaTogJ2h0dHA6Ly9zbGF0ZWpzLm9yZy90eXBlcy9zbGF0ZS92MScsXG4gIGFwcGx5LFxuICBjcmVhdGUsXG4gIGRlc2VyaWFsaXplLFxuICBzZXJpYWxpemUsXG4gIHRyYW5zZm9ybSxcbn1cblxuLyoqXG4gKiBFeHBvcnQuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHR5cGUsXG59XG4iXX0=